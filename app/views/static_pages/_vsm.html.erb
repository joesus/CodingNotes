<h1 id="vsm">Variables, Scope, and Memory</h1>

<h2 id="variables">Variables</h2>

<ul>
		<li>Dynamic Properties are allowed with reference values.</li>
<pre>
var person = {};
person.name = "Nicholas";
return(person.name);    //"Nicholas"
</pre>

		<li>Dynamic Properties are not allowed with primitive values.</li>
<pre>
var name = "Nicholas";
name.age = 27;
return(name.age);    //undefined 
</pre>

		<li>Arguments are passed by value.</li>
<pre>
var addTen = function (num) {
  // num is already defined as a variable because it's passed as a function arg
  num += 10;
  return num;
};

var count = 20;
var result = addTen(count);

return(count);  //20
return(result); //30
</pre>
		
		<li>Objects are accessed by reference even when they are passed into a function by value. When the name property is set on obj inside the function, this change is reflected outside the function because the object that it points to exists globally on the heap.</li>
<pre>
function setName(obj) {
  obj.name = "Nicholas";
}

var person = {};
// equivalent to writing: var person = new Object();

setName(person);
return(person.name);    //"Nicholas"
</pre>

		<li>There is a typeof operator that will tell you if a variable is a primitive type. This will help you determine if you can pass it as the value of a property. If the value is an object or null, then typeof returns object.</li>
<pre>
var n = null;

return(typeof n); //object
</pre>

	<li>The instanceof operator allows you to dig one level further and determine the type of object. If instanceof is used with a primitive value, it will always return false because primitives aren't objects.</li>
<pre>
result = variable instanceof constructor //this is the basic syntax

return(person instanceof Object);   //is the variable person an Object?
return(colors instanceof Array);    //is the variable colors an Array?
return(pattern instance of RegExp); //is the variable pattern a RegExp?
</pre>
</ul>

<h2 id="scope">Scope</h2>

<ul>
	<li>There is an invisible <em>variable object</em> that exists behind the scenes and is used to handle data.
	</li>
</ul>


