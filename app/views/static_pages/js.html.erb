<% content_for :sidebar do %>

<div class="col-md-3" id="sidebar">
	<div class="bs-sidebar hidden-print affix" role="complementary" style>
		<ul class="nav bs-sidenav" id="spyOnThis">
			<li><%= link_to "DataTypes", "#dataTypes" %>
				<ul class="nav">
					<li class><%= link_to "Strings", "#string" %></li>
					<li class><%= link_to "Booleans", "#booleans" %></li>
					<li class><%= link_to "Unary Operators", "#unary" %></li>
					<li class><%= link_to "Basic Math", "#BasicMath" %></li>
					<li class><%= link_to "Equality Operators", "#equality" %></li>
					<li class><%= link_to "Conditional Operators", "#conditional" %></li>
				</ul>
			<li><%= link_to "Context Scope", "#context" %></li>
			</li>
		</ul>
	</div>
</div>
<% end %>

<h1 id="dataTypes">Data Types</h1>

<ul>
	<li>You can find the data type with the typeof() method.</li>
</ul>

<h2 id="string">Strings</h2> 
	<ul>
		<li>You can input strings with single quotes but JS will return double quotes.</li>
			<pre>
				var one = '1';
				one // "1"
			</pre>
		<li>You can input strings with double quotes and JS will return double quotes.</li>
			<pre>
				var two = "2";
				two // "2"
			</pre>
		<li>Using the .length method returns the length of a string.</li>
			<pre>
				var string_of_3_letters = "abc";
				string_of_3_letter.length; // 3
			</pre>
		<li>The length of an empty string is zero.</li>
			<pre>
				var empty_string = "";
				empty_string.length; // 0
			</pre>
		<li>The .toString() conversion of a boolean returns <span id="boolTrue">true</span> or <span id="boolFalse">false</span>.</li>
			<pre>
				var yes = <span id="boolTrue">true</span>;
				yes.toString(); // "true"

				var no = <span id="boolFalse">false</span>;
				no.toString(); // "false"
			</pre>
		<li>The .toString() conversion of an integer with no arguments returns the integer as a string.</li>
			<pre>
				var number = 11;
				number.toString(); // "11"
			</pre>
		<li>The .toString() conversion of an integer with radix 2 should return base2</li>
			<pre>
				var number = 11;
				number.toString(2); // "1011"
			</pre>
		<li>The .toString() conversion of an integer with radix 16 should return hexidecimal.</li>
			<pre>
				var number = 11;
				number.toString(16); // "b"
			</pre>
		<li>The .toString() conversion of a floating point returns a decimal.</li>
			<pre>
				var fp = 2.1;
				p.toString(); // "2.1"
			</pre>
		<li>The .toString() conversion of Not a Number returns "NaN".</li>
			<pre>
				var nan = NaN;
				nan.toString(); // "NaN"
			</pre>
	</ul>

<h2 id="booleans">Booleans</h2>
	<ul>
		<li>String is <span id="boolTrue">true</span> for non-empty strings.</li>
		<li>String is <span id="boolFalse">false</span> for empty strings.</li>
		<li>Number is <span id="boolFalse">false</span> for Zero.</li>
		<li>Number is <span id="boolTrue">true</span> for One.</li>
		<li>Number is <span id="boolFalse">false</span> for NaN.</li>
	</ul>

<h2 id="unary">Unary Operators</h2>
	<ul>
		<li>++ increments by 1</li>
			<pre>
				var i = 0;
				i++; 
				i // 1
			</pre>
		<li>-- decrements by 1</li>
			<pre>
				var i = 0;
				i--; 
				i // -1
			</pre>
		<li>The prefix ++ increments by 1 before a statement is evaluated.</li>
			<pre>
				var i = 0;
				var result = 2 - ++i; 
				i // 1
				result // 1
			</pre>
		<li>The postfix ++ increments by 1 after a statement is evaluated.</li>
			<pre>
				var i = 0;
				var result = 2 - i++;
				i // 1
				result // 2
			</pre>
	</ul>

<h2 id="BasicMath">Basic Math</h2>
	<ul>
		<li>Simple Multiplication works as expected.</li>
		<li>Any number multiplied by NaN returns NaN.</li>
		<li>If all numbers are not zero and Infinity is 1 of the numbers, the result is NaN.</li>
		<li>Infinity times Infinity results in Infinity.</li>
		<li>JS will automatically convert non-Number types to Number via the built-in Number() method before evaluation.</li>
			<pre>
				var result = "2" * 3; 
				result // 6
			</pre>
		<li>Simple Division works as expected.</li>
		<li>If either number is NaN, the result of the division operation is NaN.</li>
		<li>If 0 divided by 0, the result is NaN.</li>
		<li>If numerator is non-zero and denominator is 0, result is [-|+]Infinity.</li>
		<li>If Infinity is divided by any number, result [-|+]Infinity.</li>
		<li>JS automatically converts non-Number types to Number via built-in Number() method before evaluation.</li>
			<pre>
				var result = "10" / 2; 
				result // 5
			</pre>
		<li>Addition works as expected.</li>
		<li>If either operand is NaN, the result is NaN.</li>
		<li>If +0 is added to +0, the result is +0</li>
		<li>If +0 is added to -0, the result is +0</li>
		<li>If -0 is added to -0, the result is -0</li>
		<li>If both operands are strings, the second string is concatenated to the first.</li>
			<pre>
				var result = "Cat" + "Dog"; 
				result // "CatDog" 
			</pre>
		<li>If only one operand is a string, the other operand is converted to a string and the result is the concatenation of the two strings.</li>
			<pre>
				var result = 5 + "5"; 
				result //"55"
			</pre>
	</ul>

<h2 id="equality">Equality Operators</h2>
	<ul>
		<li>Two '==' signifies that type conversion will take place to determine if two items are equal. This is considered <i>not identically equal</i>.</li>
			<pre>
				var result = ("55" == 55);
				result // <span id="boolTrue">true</span>
			</pre>
		<li>Three '===' signifies that no type conversion will take place. This is considered <i>identically equal</i>.</li>
			<pre>
				var result = ("55" === 55);
				result // <span id="boolFalse">false</span>
			</pre>
		<li>Adding a ! before '==' or '===' tests for inequality.</li>
		<li>Special Cases:</li>
			<pre>
				<div class="table-responsive">
					<table class="table">
						<thead>
							<tr>
								<td>Expression</td>
								<td>Value</td>
							</tr>
						</thead>
						<tbody>
							<tr>
								<td>null == undefined</td>
								<td><span id="boolTrue">true</span></td>
							</tr>
							<tr>
								<td>"NaN" == NaN</td>
								<td><span id="boolFalse">false</span></td>
							</tr>
							<tr>
								<td>5 == NaN</td>
								<td><span id="boolFalse">false</span></td>
							</tr>
							<tr>
								<td>NaN == NaN</td>
								<td><span id="boolTrue">false</span></td>
							</tr>
							<tr>
								<td>NaN != NaN</td>
								<td><span id="boolTrue">true</span></td>
							</tr>
							<tr>
								<td><span id="boolFalse">false</span> == 0</td>
								<td><span id="boolTrue">true</span></td>
							</tr>
							<tr>
								<td><span id="boolTrue">true</span> == 1</td>
								<td><span id="boolTrue">true</span></td>
							</tr>
							<tr>
								<td><span id="boolTrue">true</span> == 2</td>
								<td><span id="boolTrue">false</span></td>
							</tr>
							<tr>
								<td>undefined == 0</td>
								<td><span id="boolFalse">false</span></td>
							</tr>
							<tr>
								<td>null == 0</td>
								<td><span id="boolFalse">false</span></td>
							</tr>
						</tbody>
					</table>
				</div>
			</pre>
	</ul>

<h2 id="conditional">Conditional Operators</h2>
	<ul>
		<li>Conditial operators allow assignation of a variable based on the result of a boolean expression.</li>
			<pre>
				var yes = <span id="boolTrue">true</span>;
        var result = yes ? "yes was true" : "yes was false";
        result // "yes was true");
			</pre>
	</ul>

<h3>If Statements</h3>
	<ul>
		<li>Here's an example of a simple, if ... else statement.</li>
			<pre>
				var result = "star";
        if (true){
          result += " wars";
        };

        result // "star wars"

        if(false){
          result += "was a great plot";
        } else {
          result += " episode 1 had no character development";
        };
        
        result // "star wars episode 1 had no character development";
			</pre>
	</ul>

<h3>Do-While Statements</h3>
	<ul>
		<li>A do-while statement will run until the 'while' logic returns false.</li>
			<pre>
				var i = 0;
        
        do {
          i++;
        } while(i < 5);
        
        i // 4
			</pre>
		<li>This is known as a post-test loop. The greatest use for this is when you need your loop to run at least once before exiting.</li>
			<pre>
				var i = 0;
        do {
          i++;
        } while(false);
        
        i // 1
			</pre>
	</ul>


<h1 id="context">Context Scope</h1>

numbers

<pre>

</pre>

numbers


<h1 id="float">Floats</h1>

floats

<pre>

</pre>

That was floats code. 
