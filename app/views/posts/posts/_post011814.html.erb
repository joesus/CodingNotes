<div itemscope="" itemtype="http://schema.org/BlogPosting">
	<article class="blog-post" id="01-18-14">
		<p class="lead"><span itemprop="name">Dipped a toe into the Google Maps API</span> - <time datetime="2014-01-18" itemprop="dateCreated">01/18/14</time></p>

		<span itemprop="author" itemscope="" itemtype="http://schema.org/Person">
		  <span itemprop="name">
	      <a href="https://plus.google.com/u/0/101336447282156886525/" itemprop="url" rel="author" class="hidden">Joe Susnick</a>
		  </span><!-- itemprop="name" -->
		</span><!-- itemtype="Person" -->

		<span itemprop="keywords" class="hidden">
			jQuery GoogleMaps API StackOverflow Plus
		</span>
		
		<span itemprop="articleBody">

		<p>This week's jQuery project involved using the GoogleMaps API to determine prices for a moving company.
		</p>
		<p>After decifering the code, line by line - see google-map.js in your browser's development tools for the extremely notated file - I set out to modify it a bit.</p>
		<p>I added a reset button that appends to the user interface after finding a quote, and a method for removing the markers that attach to the map.</p>
		<p>The point here is that I was able to use the lessons learned by doing the project, to expand upon and improve the project.</p>
		<p>Here are some of the lessons that stood out to me while I was going through the project:</p>
		<ul>
			<li>An 'if' statement can act as a loop through an array. I knew this, but this was a very clear example of the principle.
<pre>
var clicks = 0

var CountClicks = function() {
	if (clicks <= 1) {
		//do something
	} else {
		//do something else
	}
	clicks++
}
</pre>
In this case it loops through the first time when clicks = 0 and a second time when clicks = 1, the third time it exits the loop.</li>
		<li>The val() method is a useful tool for working with elements that take inputs. We used it in this project to disable a buttom if there was no text in it's associated input field.</li>
		<li>Similarly, we can use a ternary statement to check for the existence of a jQuery element and create a new one if it does not exist. For instance:
<pre>
var necessaryDiv = $("#necessary-div"),
  anotherDiv = (necessaryDiv.length) ? necessaryDiv : $("<span><</span>div>", {
          id: "necessary-div"
        });
</pre>
		</li>
		<li>On the subject of ternary statements; there is more than one way to write the ternary <code>(clicks === 0) ? true : false</code>.
<pre>
clicks === 0 //evaluates to true if clicks === 0 or false if clicks != 0
!clicks //evaluates to true if clicks === 0 and false if clicks != 0
</pre>
		<li>One a separate note, adding a plus sign converts a string into a number. This is useful. You can run into trouble when you're trying to pick integers out of a string that mixes with letters, but on the other hand it works well with hex values and exponents where methods like parseInt() sometimes flake out. This explanation is intentially lacking because there's much more explanation than I can fit here. Point is, it was useful to see the differences between unary '+', parseInt() and parseFloat() as they're laid out in <%= link_to "this stackoverflow post", "http://stackoverflow.com/questions/17106681/parseint-vs-unary-plus-when-to-use-which", target: 'blank' %>
		</li> 
		</ul>		
		</span><!-- articleBody -->
	</article><!-- blog-post -->
</div><!-- itemtype="BlogPosting" -->